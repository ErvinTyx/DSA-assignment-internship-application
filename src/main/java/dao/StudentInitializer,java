package dao;

import control.ApplicantManager;

public class StudentInitializer {
    
    public static void initialize(ApplicantManager applicantManager) {
        // Initialize junior developer
        applicantManager.clearSkillProficiencies();
        // Get skills directly from skillProficiencyInitializer
        applicantManager.registerStudent(
            "Alex Johnson", 
            "New York", 
            2 // Experience: 2 years
        );
        applicantManager.updateStudentSkills("S1", skillProficiencyInitializer.getDeveloperProficiencies());
        
        // Initialize senior developer
        applicantManager.clearSkillProficiencies();
        applicantManager.registerStudent(
            "Sarah Chen", 
            "San Francisco", 
            8 // Experience: 8 years
        );
        applicantManager.updateStudentSkills("S2", skillProficiencyInitializer.getDeveloperProficiencies());
        
        // Initialize QA engineer
        applicantManager.clearSkillProficiencies();
        applicantManager.registerStudent(
            "Michael Lee", 
            "Chicago", 
            4 // Experience: 4 years
        );
        applicantManager.updateStudentSkills("S3", skillProficiencyInitializer.getQAProficiencies());
        
        // Initialize UX designer
        applicantManager.clearSkillProficiencies();
        applicantManager.registerStudent(
            "Emma Rodriguez", 
            "Boston", 
            5 // Experience: 5 years
        );
        applicantManager.updateStudentSkills("S4", skillProficiencyInitializer.getUXProficiencies());
        
        // Initialize project manager
        applicantManager.clearSkillProficiencies();
        applicantManager.registerStudent(
            "James Wilson", 
            "Seattle", 
            7 // Experience: 7 years
        );
        applicantManager.updateStudentSkills("S5", skillProficiencyInitializer.getPMProficiencies());
        
        // Initialize full stack developer (combining skills)
        applicantManager.clearSkillProficiencies();
        applicantManager.registerStudent(
            "David Garcia", 
            "Austin", 
            6 // Experience: 6 years
        );
        // For the full stack developer, we'll create a custom skill set in the next step
        
        // Since we can't directly combine skills from different methods of skillProficiencyInitializer,
        // we'll use the updateStudentSkills method to update with developer skills first
        applicantManager.updateStudentSkills("S6", skillProficiencyInitializer.getDeveloperProficiencies());
        
        // Then use the existing skills as a base and add QA skills one by one
        // Get the current skills
        applicantManager.clearSkillProficiencies();
        // Add the QA skills
        applicantManager.addSkillProficiency("Selenium", 4);
        applicantManager.addSkillProficiency("JUnit", 3);
        applicantManager.addSkillProficiency("Manual Testing", 4);
        // Update the student's skills
        applicantManager.updateStudentSkills("S6", applicantManager.getSkillProficiencies());
        
        // Clear any remaining skill proficiencies
        applicantManager.clearSkillProficiencies();
        
        // Add a mobile developer with custom skills
        applicantManager.clearSkillProficiencies();
        applicantManager.addSkillProficiency("Swift", 5);
        applicantManager.addSkillProficiency("Kotlin", 4);
        applicantManager.addSkillProficiency("React Native", 3);
        applicantManager.registerStudent(
            "Sophia Kim", 
            "Toronto", 
            4 // Experience: 4 years
        );
        
        // Clear any remaining skill proficiencies
        applicantManager.clearSkillProficiencies();
    }
}
